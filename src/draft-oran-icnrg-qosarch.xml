<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC0793 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0793.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2205 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2205.xml">
<!ENTITY RFC2474 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2474.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC2998 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2998.xml">
<!ENTITY RFC3170 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3170.xml">
<!ENTITY RFC3209 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3209.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4340 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4340.xml">
<!ENTITY RFC4594 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4594.xml">
<!ENTITY RFC4960 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4960.xml">
<!ENTITY RFC8569 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8569.xml">
<!ENTITY RFC8609 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8609.xml">
<!ENTITY I-D.moiseenko-icnrg-flowclass SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.moiseenko-icnrg-flowclass.xml">
<!ENTITY I-D.ietf-quic-transport SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-quic-transport.xml">
<!ENTITY I-D.muscariello-intarea-hicn SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.muscariello-intarea-hicn.xml">
<!ENTITY I-D.irtf-icnrg-ccninfo SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.irtf-icnrg-ccninfo.xml">
<!ENTITY I-D.mastorakis-icnrg-icntraceroute SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.mastorakis-icnrg-icntraceroute.xml">
<!ENTITY I-D.gundogan-icnrg-iotqos SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.gundogan-icnrg-iotqos.xml">
<!ENTITY I-D.oran-icnrg-flowbalance SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.oran-icnrg-flowbalance.xml">
<!ENTITY I-D.anilj-icnrg-dnc-qos-icn SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.anilj-icnrg-dnc-qos-icn.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<rfc category="info" docName="draft-oran-icnrg-qosarch-latest" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->
<front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->
    <title abbrev="ICN QoS Architecture">
    Considerations in the development of a QoS Architecture for CCNx-like ICN protocols
    </title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->
    <author fullname="Dave Oran" surname="D. Oran">
        <organization>Network Systems Research and Design</organization>
        <address>
            <postal>
                <street>4 Shady Hill Square</street>
                <!-- Reorder these if your country does things differently -->
                <city>Cambridge</city>
                <region>MA</region>
                <code>02138</code>
                <country>USA</country>
            </postal>
            <phone></phone>
            <email>daveoran@orandom.net</email>
        <!-- uri and facsimile elements may also be added -->
        </address>
    </author>

    <date month="December" year="2019" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>IRTF</area>
    <workgroup>ICNRG</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>template</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
       <t>This is a position paper. It documents the author's personal views on how Quality of Service (QoS) capabilities ought to be accommodated in ICN protocols like CCNx or NDN which employ flow-balanced Interest/Data exchanges and hop-by-hop forwarding state as their fundamental machinery. It argues that such protocols demand a substantially different approach to QoS from that taken in TCP/IP, and proposes specific design patterns to achieve both classification and differentiated QoS treatment on both a flow and aggregate basis. It also considers the effect of caches as a resource in addition to memory, CPU and link bandwidth that should be subject to explicitly unfair resource allocation. The proposed methods are intended to operate purely at the network layer, providing the primitives needed to achieve both transport and higher layer QoS objectives. It explicitly excludes any discussion of Quality of Experience (QoE) which can only be assessed and controlled at the application layer or above. </t>
<!--This document is a product of the IRTF Information-Centric Networking Research Group (ICNRG). -->
    </abstract>
</front>

<middle>
<section anchor="intro" title="Introduction">

<t>The TCP/IP protocol suite used on today's Internet has over 30 years of accumulated research and engineering into the provision of Quality of Service machinery, employed with varying success in different environments. ICN protocols like Named Data Networking (NDN <xref target="NDN"/>) and Content-Centric Networking (CCNx <xref target="RFC8569"/>,<xref target="RFC8609"/>) have an accumulated 10 years of research and very little deployment. We therefore have the opportunity to either recapitulate the approaches taken with TCP/IP (e.g. IntServ <xref target="RFC2998"/> and Diffserv <xref target="RFC2474"/>) or design a new architecture and associated mechanisms aligned with the properties of ICN protocols which differ substantially from those of TCP/IP. This position paper advocates the latter approach and comprises the author's personal views on how Quality of Service (QoS) capabilities ought to be accommodated in ICN protocols like CCNx or NDN. Specifically, these protocols differ in fundamental ways from TCP/IP. The important differences are summarized in the following table:</t>

<texttable anchor="IPvsICN" style="all" title="Differences between IP and ICN relevant to QoS architecture">
	<ttcol align="center">TCP/IP</ttcol>
	<ttcol align="center">CCNx or NDN</ttcol>
	<c>Stateless forwarding</c><c>Stateful forwarding</c>
	<c>Simple Packets</c><c>Object model with optional caching</c>
	<c>Pure datagram model</c><c>Request-response model</c>
	<c>Asymmetric Routing</c><c>Symmetric Routing</c>
	<c>Independent flow directions</c><c>Flow balance</c>
	<c>Flows grouped by IP prefix and port</c><c>Flows grouped by name prefix</c>
	<c>End-to-end congestion control</c><c>Hop-by-hop congestion control</c>
</texttable>

<t>This document proposes specific design patterns to achieve both flow classification and differentiated QoS treatment for ICN on both a flow and aggregate basis. It also considers the effect of caches as a resource in addition to memory, CPU and link bandwidth that should be subject to explicitly unfair resource allocation. The proposed methods are intended to operate purely at the network layer, providing the primitives needed to achieve both transport and higher layer QoS objectives. It does not propose detailed protocol machinery to achieve these goals; it leaves these to supplementary specifications, such as <xref target="I-D.moiseenko-icnrg-flowclass"/> and <xref target="I-D.anilj-icnrg-dnc-qos-icn"/>. It explicitly excludes any discussion of Quality of Experience (QoE) which can only be assessed and controlled at the application layer or above.</t>

<t>Much of this document is derived from presentations the author has given at ICNRG meetings over the last few years that are available through the IETF datatracker (see, for example <xref target="Oran2018QoSslides"/>).</t>
</section>

<section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>

<section anchor="background" title="Background on the nature and properties of Quality of Service in network protocols">
<t>Much of this background material is tutorial and can be simply skipped by readers familiar with the long and checkered history of quality of service in packet networks. Other parts of it are polemical yet serve to illuminate the author's personal biases and technical views.</t>

<t>All networking systems provide some degree of "quality of service" in that they exhibit non-zero utility when offered traffic to carry. The term therefore is used to describe systems that control the allocation of various resources in order to achieve <spanx>managed unfairness</spanx>.  Absent explicit mechanisms to decide what traffic to be unfair to, most systems try to achieve some form of "fairness" in the allocation of resources, optimizing the overall utility delivered to all demand under the constraint of available resources. 

From this it should be obvious that you cannot use QoS mechanisms to create or otherwise increase resource capacity! In fact, all known QoS schemes have non-zero overhead and hence may (albeit slightly) decrease the total resources available to carry user traffic.</t>

<t>Further, accumulated experience seems to indicate that QoS is helpful in a fairly narrow range of network conditions:
<list style="symbols">
	<t>If your resources are lightly loaded, you don't need it, as neither congestive loss nor substantial queueing delay occurs</t>
	<t>If your resources are heavily oversubscribed, it doesn't save you. So many users will be unhappy that you are probably not delivering a viable service</t>
	<t>Failures can rapidly shift your state from the first above to the second, in which case either:
	<list style="symbols">
		<t>your QoS machinery cannot respond quickly enough to maintain the advertised service quality continuously, or</t>
		<t>resource allocations are sufficiently conservative to result in substantial wasted capacity under non-failure conditions</t>
	</list></t>
</list>
Nevertheless, though not universally deployed, QoS is advantageous at least for some applications and some network environments. Some examples include: 
<list style="symbols">
	<t>applications with steep utility functions <xref target="Shenker2006"/>, such as real-time multimedia</t>
	<t>applications with safety-critical operational constraints, such as avionics or industrial automation</t>
	<t>dedicated or tightly managed networks whose economics depend on strict adherence to challenging service level agreements (SLAs)</t> 
</list>
Another factor in the design and deployment of QoS is the scalability and scope over which the desired service can be achieved. Here there are two major considerations, one technical, the other economic/political:
<list style="symbols">
	<t>Some signaled QoS schemes, such as RSVP <xref target="RFC2205"/>, maintain state in routers for each flow, which scales linearly with the number of flows. For core routers through which pass millions to billions of flows, the memory required is infeasible to provide.</t>
	<t>The Internet is comprised of many minimally cooperating autonomous systems <xref target="AS"/>. There are practically no successful examples of QoS deployments crossing the AS boundaries of multiple service providers. This in almost all cases limits the applicability of QoS capabilities to be intra-domain.</t>
</list>
</t>

<t>Finally, the relationship between QoS and either accounting or billing is murky. Some schemes can accurately account for resource consumption and ascertain to which user to allocate the usage. Others cannot. While the choice of mechanism may have important practical economic and political consequences for cost and workable business models, this document considers none of those things and discusses QoS only in the context of providing managed unfairness.</t>
	
<t>Some further background on congestion control for ICN is below.</t>

<section anchor="CCbasics" title="Congestion Control basics relevant to ICN">
<t>Congestion control is necessary in any packet network that multiplexes traffic among multiple sources and destinations in order to:
<list style="numbers">
	<t>Prevent collapse of utility due to overload, where the total offered service declines as load increases, perhaps precipitously, rather than increasing or remaining flat.</t>
	<t>Avoid starvation of some traffic due to excessive demand by other traffic.</t>
	<t>Beyond the basic protections against starvation, achieve "fairness" among competing traffic. Two common objective functions are <xref target="minmaxfairness"/> and <xref target="proportionalfairness"/> both of which have been implemented and deployed successfully on packet networks for many years.</t>
</list>
</t>

<t>Before moving on to QoS, it is useful to consider how congestion control works in NDN or CCNx. Unlike the IP protocol family, which relies exclusively on end-to-end congestion control (e.g. TCP<xref target="RFC0793"/>, DCCP<xref target="RFC4340"/>, SCTP<xref target="RFC4960"/>, QUIC<xref target="I-D.ietf-quic-transport"/>), CCNx and NDN can employ hop-by-hop congestion control. There is per-Interest/Data state at every hop of the path and therefore outstanding Interests provide information that can be used to optimize resource allocation for data returning on the inverse path, such as bandwidth sharing, prioritization and overload control. In current designs, this allocation is often done using Interest counting. By accepting one Interest packet from a downstream node, implicitly this provides a guarantee (either hard or soft) that there is sufficient bandwidth on the inverse direction of the link to send back one Data packet. A number of congestion control schemes have been developed for ICN that operate in this fashion, for example <xref target="Wang2013"/>, <xref target="Mahdian2016"/>, <xref target="Song2018"/>, <xref target="Carofiglio2012"/>. Other schemes, like <xref target="Schneider2016"/> neither count nor police Interests, but instead monitor queues using AQM (active queue management) to mark returning Data packets that have experienced congestion. This later class of schemes is similar to those used on IP in the sense that they depend on consumers adequately reducing their rate of Interest injection to avoid Data packet drops due to buffer overflow in forwarders. The former class of schemes is (arguably) more robust against mis-behavior by consumers.
</t>

<t>Given the stochastic nature of round trip times, and the ubiquity of wireless links and encapsulation tunnels with variable bandwidth, a simple scheme that admits interests only based on a time-invariant estimate of the returning link bandwidth will perform poorly. However, two characteristics of NDN and CCNx-like protocols can help substantially to improve the accuracy and responsiveness of the bandwidth allocation:
<list style="numbers">
	<t>RTT is bounded by the Interest lifetime, which puts an upper bound on the RTT uncertainty for any given Interest/Data exchange. If Interest lifetimes are kept reasonably short (a few RTTs) the allocations do not have to deal with an arbitrarily long tail. One could in fact do a deterministic allocation on this basis, but the result would be highly pessimistic. Nevertheless, having a cut-off does improve the performance of an optimistic allocation scheme.</t>

	<t>Returning Data packets can be congestion marked by an ECN-like marking scheme if the inverse link starts experiencing long queue occupancy or other congestion indication. Unlike TCP/IP, where the rate adjustment can only be done end-to-end, this feedback is usable immediately by the downstream ICN forwarder and the Interest shaping rate lowered after a single link RTT. This may allow less pessimistic rate adjustment schemes than the AIMD with .5 multiplier that is used on TCP/IP networks. It also allows the rate adjustments to be spread more accurately among the Interest/Data flows traversing a link sending congestion signals.</t>
</list></t>

<t>A useful discussion of these properties and how they demonstrate the advantages of ICN approaches to congestion control can be found in <xref target="Carofiglio2016"/></t>

</section>

</section>

<section anchor="basics" title="What can we control to achieve QoS in ICN?">

<t>QoS is achieved through managed unfairness in the allocation of resources in network elements, particularly in the routers doing forwarding of ICN packets. So, a first order question is what resources need to be allocated, and how to ascertain which traffic gets what allocations. In the case of CCNx or NDN the important network element resources are:</t>

<texttable anchor="ICNresources" style="all" title="ICN-related Network Element Resources">
	<ttcol align="center">Resource</ttcol> <ttcol align="left">ICN Usage</ttcol>
	<c>Communication Link capacity</c> <c>buffering for queued packets</c>
	<c>Content Store capacity</c> <c>to hold cached data</c>
	<c>Forwarder memory</c> <c>for the Pending Interest Table (PIT)</c>
	<c>Compute capacity</c> <c>for forwarding packets, including the cost of Forwarding Information Base (FIB) lookups.</c>
</texttable>

<t>For these resources, any QoS scheme has to specify two things:
<list style="numbers">
	<t>How do you create <spanx>equivalence classes</spanx> (a.k.a. flows) of traffic to which different QoS treatments are applied?</t>
	<t>What are the possible treatments and how are those mapped to the resource allocation algorithms?</t>
</list>
</t>

<t>Two critical facts of life come into play when designing a QoS scheme. First, the number of equivalence classes that can be simultaneously tracked in a network element is bounded by both memory and processing capacity to do the necessary lookups. One can allow very fine-grained equivalence classes, but not be able to employ them globally because of scaling limits of core routers. That means it is wise to either restrict the range of equivalence classes, or allow them to be <spanx>aggregated</spanx>, trading off accuracy in policing traffic against ability to scale.</t>

<t>Second, the flexibility of expressible treatments can be tightly constrained by both protocol encoding and algorithmic limitations. The ability to encode the treatment requests in the protocol can be limited (as it is for IP - there are only 6 of the TOS bits available for Diffserv treatments), but as or more important is whether there are practical traffic policing, queuing, and pacing algorithms that can be combined to support a rich set of QoS treatments.</t>

<t>The two considerations above in combination can easily be substantially more expressive than what can be achieved in practice with the available number of queues on real network interfaces or the amount of per-packet computation needed to enqueue or dequeue a packet.
</t>
</section>

<section anchor="ipisdifferent" title="How does this relate to QoS in TCP/IP?">
<t>TCP/IP has fewer resource types to manage than ICN, and in some cases the allocation methods are simpler, as shown in the following table:</t>
<texttable anchor="TCPIPresources" style="all" title="IP-related Network Element Resources">
	<ttcol align="left">Resource</ttcol> 
	<ttcol align="center">IP Relevant</ttcol> 
	<ttcol align="left" width="30">TCP/IP Usage</ttcol>
	<c>Communication Link capacity</c> <c>YES</c> <c>buffering for queued packets</c>
	<c>Content Store capacity</c> <c>NO</c> <c>no content store in IP</c>
	<c>Forwarder memory</c> <c>MAYBE</c> <c>not needed for output-buffered designs </c>
	<c>Compute capacity</c> <c>YES</c> <c>for forwarding packets, but arguably much cheaper than ICN</c>
</texttable>

<t>For these resources, IP has specified three fundamental things, as shown in the following table:</t>
<texttable anchor="IPQoSspecifiers" style="all" title="Fundamental protocol elements to achieve QoS for TCP/IP">
	<ttcol align="center">What</ttcol> <ttcol align="left">How</ttcol>
	<c><spanx style="strong">Equivalence classes</spanx></c>
	<c>subset+prefix match on IP 5-tuple {SA,DA,SP,DP,PT}</c>
	<c><spanx style="strong">Diffserv treatments</spanx></c>
	<c>(very) small number of globally-agreed traffic classes</c>
	<c><spanx style="strong">Intserv treatments</spanx></c>
	<c>per-flow parameterized <spanx>Controlled Load</spanx> and <spanx>Guaranteed</spanx> service classes</c>
</texttable>

<t>Equivalence classes for IP can be pairwise, by matching against both source and destination address+port, pure group using only destination address+port, or source-specific multicast with source adress+port and destination multicast address+port.</t>

<t>With Intserv, the signaling protocol RSVP <xref target="RFC2205"/> carries two data structures, the FLOWSPEC and the TSPEC. The former fulfills the requirement to identify the equivalence class to which the QoS being signaled applies. The latter comprises the desired QoS treatment along with a description of the dynamic character of the traffic (e.g. average bandwidth and delay, peak bandwidth, etc.). Both of these encounter substantial scaling limits, which has meant that Intserv has historically been limited to confined topologies, and/or high-value usages, like traffic engineering.</t>

<t>With Diffserv, the protocol encoding (6 bits in the TOS field of the IP header) artificially limits the number of classes one can specify. These are documented in <xref target="RFC4594"/>. Nonetheless, when used with fine-grained equivalence classes, one still runs into limits on the number of queues required.</t>
	
</section>

<section anchor="icnisdifferent" title="Why is ICN Different? Can we do Better? ">

<t>While one could adopt an approach to QoS mirroring the extensive experience with TCP/IP, this would, in the author's view, be a mistake. The implementation and deployment of QoS in IP networks has been spotty at best. There are of course economic and political reasons as well as technical reasons for these mixed results, but there are several architectural choices in ICN that make it a potentially much better protocol base to enhance with QoS machinery. This section discusses those differences and their consequences.</t>

	<section anchor="icnflows" title="Equivalence class capabilities">
	<t>First and foremost, hierarchical names are a much richer basis for specifying equivalence classes than IP 5-tuples. The IP address (or prefix) can only separate traffic by topology to the granularity of hosts, and not express actual computational instances nor sets of data. Ports give some degree of per-instance demultiplexing, but this tends to be both coarse and ephemeral, while confounding the demultiplexing function with the assignment of QoS treatments to particular subsets of the data. Some degree of finer granularity is possible with IPv6 by exploiting the ability to use up to 64 bits of address for classifying traffic. In fact, the hICN project (<xref target="I-D.muscariello-intarea-hicn"/>), while adopting the request-response model of CCNx, uses IPv6 addresses as the available namespace, and IPv6 packets (plus "fake" TCP headers) as the wire format.</t>

	<t>Nonetheless, the flexibility of tokenized, variable length, hierarchical names allows one to directly associate classes of traffic for QoS purposes with the structure of an application namespace. The classification can be as coarse or fine-grained as desired by the application. While not <spanx>always</spanx> the case, there is typically a straightforward association between how objects are named, and how they are grouped together for common treatment. Examples abound; a number can be conveniently found in <xref target="I-D.moiseenko-icnrg-flowclass"/>.</t>

	</section>
	
	<section title="Topology interactions with QoS">
	<t>In ICN, QoS is not pre-bound to network topology since names are non-topological, unlike unicast IP addresses. This allows QoS to be applied to multi-destination and multi-path environments in a straightforward manner, rather than requiring either multicast with coarse class-based scheduling or complex signaling like that in RSVP-TE <xref target="RFC3209"/> that is needed to make point-to-multipoint MPLS work.</t>

	<t>Because of IP's stateless forwarding model, complicated by the ubiquity of asymmetric routes, any flow-based QoS requires state that is decoupled from the actual arrival of traffic and hence must be maintained, at least as soft-state, even during quiescent periods. Intserv, for example, requires flow signaling with state O(#flows). ICN, even worst case, requires state O(#active Interest/Data exchanges), since state can be instantiated on arrival of an Interest, and removed lazily once the data hase been returned.</t>
	</section>

	<section anchor="qostreatments" title="Specification of QoS treatments">
	<t>Unlike Intserv, Difserv eschews signaling in favor of class-based configuration of resources and queues in network elements. However, Diffserv limits traffic treatments to a few bits taken from the ToS field of IP. No such wire encoding limitations exist for NDN or CCNx, as the protocol is completely TLV-based, and one (or even more than one) new field can be easily defined to carry QoS treatment information.</t>

	<t>Therefore, there are greenfield possibilities for more powerful QoS treatment options in ICN. For example, IP has no way to express a QoS treatment like "try hard to deliver reliably, even at the expense of delay or bandwidth". Such a QoS treatment for ICN could invoke native ICN mechanisms, none of which are present in IP, such as:
	<list style="symbols">
		<t>In-network retransmission in response to hop-by-hop errors returned from upstream forwarders</t>
		<t>Trying multiple paths to multiple content sources either in parallel or serially</t>
		<t>Higher precedence for short-term caching to recover from downstream errors</t>
		<t>Coordinating cache utilization with forwarding resources</t>
	</list></t>
	<t>Such mechanisms are typically described in NDN and CCNx as <spanx>forwarding strategies</spanx>. However, little or no guidance is given for what application actions or protocol machinery is used to decide which forwarding strategy to use for which Interests that arrive at a forwarder. See <xref target="BenAbraham2018"/> for an investigation of these issues. Associating forwarding strategies with the equivalence classes and QoS treatments directly can make them more accessible and useful to implement and deploy.</t>
	
	<t>Stateless forwarding and asymmetric routing in IP limits available state/feedback to manage link resources. In contrast, NDN or CCNx forwarding allows all link resource allocation to occur as part of Interest forwarding, potentially simplifying things considerably. For example, with symmetric routing, producers have no control over the paths their data packets traverse, and hence any QoS treatments intended to influence routing paths from producer to consumer will have no effect.</t>

	<t>One complication in the handling of ICN QoS treatments is not present in IP and hence worth mention. CCNx and NDN both perform <spanx>Interest aggregation</spanx> (See Section 2.3.2 of <xref target="RFC8569"/>). If an Interest arrives matching an existing PIT entry, but with a different QoS treatment from an Interest already forwarded, it can be tricky to decide whether to aggregate the interest or forward it, and how to keep track of the differing QoS treatments for the two Interests. Exploration of the details surrounding these situations is beyond the scope of this document; further discussion can be found for the general case of flow balance and congestion control in <xref target="I-D.oran-icnrg-flowbalance"/>, and specifically for QoS treatments in <xref target="I-D.anilj-icnrg-dnc-qos-icn"/>.</t>
	</section>
	
	<section title="ICN forwarding semantics effect on QoS">
	<t>IP has three forwarding semantics, with different QoS needs (Unicast, Anycast, Multicast). ICN has the single forwarding semantic, so any QoS machinery can be uniformly applied across any request/response invocation, whether it employs dynamic destination routing, multi-destination parallel requests, or even localized flooding (e.g. directly on L2 multicast mechanisms). Additionally, the pull-based model of ICN avoids a number of thorny multicast QoS problems that IP has (<xref target="Wang2000"/>, <xref target="RFC3170"/>, <xref target="Tseng2003"/>).</t>

	<t>The Multi-destination/multi-path forwarding model in ICN changes resource allocation needs in a fairly deep way. IP treats all endpoints as open-loop packet sources, whereas NDN and CCNx have strong asymmetry between producers and consumers as packet sources.</t>
	</section>
	
	<section title="QoS interactions with Caching">
	<t>IP has no caching in routers, whereas ICN needs ways to allocate cache resources. Treatments to control caching operation are unlikely to look much like the treatments used to control link resources. NDN and CCNx already have useful cache control directives associated with Data messages. The CCNx controls include:
	<list style="hanging">
		<t hangText="ExpiryTime:">time after which a cached Content Object is considered expired and MUST no longer be used to respond to an Interest from a cache.</t>
		<t hangText="Recommended Cache Time:">time after which the publisher considers the Content Object to be of low value to cache.</t>
	</list></t>
	<t>See <xref target="RFC8569"/> for the formal definitions.</t>
	
	<t>ICN flow classifiers, such as those in <xref target="I-D.moiseenko-icnrg-flowclass"/> can be used to achieve soft or hard partitioning of cache resources in the content store of an ICN forwarder. For example, cached content for a given equivalence class can be considered <spanx>fate shared</spanx> in a cache whereby objects from the same equivalence class can be purged as a group rather than individually. This can recover cache space more quickly and at lower overhead than pure per-object replacement when a cache is under extreme pressure and in danger of thrashing. In addition, since the forwarder remembers the QoS treatment for each pending Interest in its PIT, the above cache controls can be augmented by policy to prefer retention of cached content for some equivalence classes as part of the cache replacement algorithm.</t>
	
	</section>

</section>

<section anchor="principles" title="A strawman set of principles to guide QoS architecture for ICN">

<t>Based on the observations made in the earlier sections, this summary section captures the author's ideas for clear and actionable architectural principles for how to incorporate QoS machinery into ICN protocols like NDN and CCNx. Hopefully, they can guide further work and focus effort on portions of the giant design space for QoS that have the best tradeoffs in terms of flexibility, simplicity, and deployability.</t>

<t><spanx style="strong">Define equivalence classes using the name hierarchy rather than creating an independent traffic class definition</spanx>. This directly associates the specification of equivalence classes of traffic with the structure of the application namespace. It can allow hierarchical decomposition of equivalence classes in a natural way because of the way hierarchical ICN names are constructed. Two practical mechanisms are presented in <xref target="I-D.moiseenko-icnrg-flowclass"/> with different tradeoffs between security and the ability to aggregate flows. Either prefix-based (EC3) or explicit name component based (ECNT) or both could be adopted as the part of the QoS architecture for defining equivalence classes.</t>

<t><spanx style="strong"> Put consumers in control of Link and Forwarding resource allocation</spanx>. Do all link buffering and forwarding (both memory and CPU) resource allocations based on Interest arrivals. This is attractive because it provides early congestion feedback to consumers, and allows scheduling the reverse link direction ahead of time for carrying the matching data. It makes enforcement of QoS treatments a single-ended (i.e. at the consumer) rather than a double-ended problem and can avoid wasting resources on fetching data that will wind up dropped when it arrives at a bottleneck link.</t>

<t><spanx style="strong">Allow producers to influence the allocation of cache resources</spanx>. Producers want to affect caching decisions in order to:
<list style="symbols">
	<t>Shed load by having Interests served by content stores in forwarders before reaching the producer itself.</t>
	<t>Survive transient outages of either the producer or links close to the producer.</t>
</list> 
For caching to be effective, individual Data objects in an equivalence class need to have similar treatment; otherwise well-known cache thrashing pathologies due to self-interference emerge. Producers have the most direct control over caching policies through the caching directives in Data messages. It therefore makes sense to put the producer, rather than the consumer or network operator in charge of specifying these equivalence classes.</t> 

<t>See <xref target="I-D.moiseenko-icnrg-flowclass"/> for specific mechanisms to achieve this.</t>

<t><spanx style="strong">Allow consumers to influence the allocation of cache resources</spanx>. Consumers want to affect caching decisions in order to:
<list style="symbols">
	<t>Reduce latency for retrieving data</t>
	<t>Survive transient outages of either a producer or links close to the consumer</t>
</list>
Consumers can have indirect control over caching by specifying QoS treatments in their Interests. Consider the following potential QoS treatments by consumers that can drive caching policies:
<list style="symbols">
	<t>A QoS treatment requesting better robustness against transient disconnection can be used by a forwarder close to the consumer (or downstream of an unreliable link) to preferentially cache the corresponding data.</t>
	<t>Conversely a QoS treatment together with, or in addition to a request for short latency, to indicate that new data will be requested soon enough that caching the current data being requested would be ineffective and hence to only pay attention to the caching preferences of the producer.</t>
	<t>A QoS treatment indicating a mobile consumer likely to incur a mobility event within an RTT (or a few RTTs). Such a treatment would allow a mobile network operator to preferentially cache the data at a forwarder positioned at a <spanx>join point</spanx> or <spanx>rendezvous point</spanx> of their topology</t>
</list>
</t>

<t><spanx style="strong">Give network operators the ability to match customer SLAs to cache resource availability</spanx>. Network operators, whether closely tied administratively to producer or consumer, or constituting an independent transit administration, provide the storage resources in the ICN forwarders. Therefore, they are the ultimate arbiters of how the cache resources are managed. In addition to any local policies they may enforce, the cache behavior from the QoS standpoint emerges from how the producer-specified equivalence classes map onto cache space availability, including whether cache entries are treated individually, or fate-shared. Forwarders also determine how the consumer-specified QoS treatments map to the precedence used for retaining Data objects in the cache.</t>

<t>Besides utilizing cache resources to meet the QoS goals of individual producers and consumers, network operators also want to manage their cache resources in order to:
<list style="symbols">
	<t>Ameliorate congestion hotspots by reducing load converging on producers they host on their network.</t>
	<t>Improve Interest satisfaction rates by utilizing caches as short-term retransmission buffers to recover from link errors or outages.</t>
	<t>Improve both latency and reliability in environments when consumers move in the operator's topology.</t>
</list>
</t>

<t><spanx style="strong">Re-think how to specify traffic treatments - don't just copy Diffserv</spanx>. Some of the Diffserv classes may form a good starting point, as their mapping onto queuing algorithms for managing link buffering are well understood. However, Diffserv alone does not allow one to express latency versus reliability tradeoffs or other useful QoS treatments. Nor does it permit "TSPEC"-style traffic descriptions as are allowed in a signaled QoS scheme. Here are some examples:
<list style="symbols">
	<t>A "burst" treatment, where an initial Interest gives an aggregate data size to request allocation of link capacity for a large burst of Interest/Data exchanges. The Interest can be rejected at any hop if the resources are not available. Such a treatment can also accommodate Data implosion produced by the discovery procedures of management protocols like <xref target="I-D.irtf-icnrg-ccninfo"/>.</t>
	<t>A "reliable" treatment, which affects preference for allocation of PIT space for the Interest and Content Store space for the data in order to improve the robustness of IoT data delivery in constrained environment, as is described in <xref target="I-D.gundogan-icnrg-iotqos"/>.</t>
	<t>A "search" treatment, which, within the specified Interest Lifetime, tries many paths either in parallel or serial to potentially many content sources, to maximize the probability that the requested item will be found. This is done at the expense of the extra bandwidth of both forwarding Interests and receiving multiple responses upstream of an aggregation point. The treatment can encode a value expressing tradeoffs like breadth-first versus depth-first search, and bounds on the total resource expenditure. Such a treatment would be useful for instrumentation protocols like <xref target="I-D.mastorakis-icnrg-icntraceroute"/>.</t>
</list>
</t>

<t>As an aside, loose latency control can be achieved by bounding Interest Lifetime as long as it is not also used as an application mechanism to provide subscriptions or establish path traces for producer mobility. See <xref target="Krol2018"/> for a discussion of the network versus application timescale issues in ICN protocols.</t>

<!--
  can we tighten this up to really manage latency-sensitive traffic? Can we play with this hop-by-hop?
Consider anticipatory allocation for reverse traffic (e.g. phone-home interaction styles)
-->

	<section anchor="INTSERV" title="What about the richer QoS semantics available with INTServ-like traffic control?"> 
		<t>Basic QoS treatments such as those summarized above may not be adequate to cover the whole range of application utility functions and deployment environments we expect for ICN. While it is true that one does not necessarily need a separate signaling protocol like RSVP given the state carried in the ICN data plane by forwarders, there are some potentially important capabilities not provided by just simple QoS treatments applied to per- Interest/Data exchanges. INTserv's richer QoS capabilities may be of value, especially if they can be provided in ICN at lower complexity and protocol overhead than INTServ+RSVP.</t>

		<t>There are three key capabilities missing from Diffserv-like QoS treatments, no matter how sophisticated they may be in describing the desired treatment for a given equivalence class of traffic. INTserv-like QoS provides all of these:
		<list style="numbers">
			<t>The ability to <spanx style="strong">describe traffic flows</spanx> in a mathematically meaningful way. This is done through parameters like average rate, peak rate, and maximum burst size. The parameters are encapsulated in a data structure called a "TSPEC" which can be placed in whatever protocol needs the information (in the case of TCP/IP INTserv, this is RSVP).</t>
	
			<t>The ability to perform <spanx style="strong">admission control</spanx>, where the element requesting the QoS treatment can know <spanx>before</spanx> introducing traffic whether the network elements have agreed to provide the requested traffic treatment. An important side-effect of providing this assurance is that the network elements install state that allows the forwarding and queuing machinery to police and shape the traffic in a way that provides a sufficient degree of <spanx>isolation</spanx> from the dynamic behavior of other traffic. Depending on the admission control mechanism, it may or may not be possible to explicitly release that state when the application no longer needs the QoS treatment.</t>
	
			<t>The permissable <spanx style="strong">degree of divergence</spanx> in the actual traffic handling from the requested handling. INTServ provided two choices here, the <spanx>controlled load</spanx> service and the <spanx>guaranteed</spanx> service. The former allows stochastic deviation equivalent to what one would experience on an unloaded path of a packet network. The latter conforms to the TSPEC deterministically, at the obvious expense of demanding extremely conservative resource allocation.</t>
		</list></t>

	<t>Given the limited applicability of these capabilities in today's Internet, the author does not take any position as to whether any of these INTserv-like capabilities are needed for ICN to be succesful. However, a few things seem important to consider. The following paragraphs speculate about the consequences to the CCNx or NDN protocol architectures of incorporating these features.</t>

	<t>Superficially, it would be quite straightforward to accommodate INTserv-equivalent traffic descriptions in CCNx or NDN. One could define a new TLV for the Interest message to carry a TSPEC. A forwarder encountering this, together with a QoS treatment request (e.g. as proposed in <xref target="qostreatments"/>) could associate the traffic specification with the corresponding equivalence class derived from the name in the Interest. This would allow the forwarder to create state that not only would apply to the returning Data for that Interest when being queued on the downstream interface, but be maintained as soft state across multiple Interest/Data exchanges to drive policing and shaping algorithms at per-flow granularity. The cost in Interest message overhead would be modest, however the complications associated with managing different traffic specifications in different Interests for the same equivalence class might be substantial. Of course, all the scalability considerations with maintaining per-flow state also come into play.</t>

	<t>Similarly, it would be equally straightforward to have a way to express the degree of divergence capability that INTserv provides through its controlled load and guaranteed service definitions. This could either be packaged with the traffic specification or encoded separately.</t>

	<t>In contrast to the above, performing admission control for ICN flows is likely to be just as heavy-weight as it turned out to be with IP using RSVP. The dynamic multi-path, multi-destination forwarding model of ICN makes performing admission control particularly tricky. Just to illustrate:
	<list style="symbols">
		<t>Forwarding paths are not confined to single paths (or a few ECMP equivalent paths) as they are with IP, making it difficult to know where to install state in advance of the arrival of an Interest to forward.</t>
		<t>As with point-to-multipoint complexities when using RSVP for MPLS-TE, state has to be installed to multiple producers over multiple paths before an admission control algorithm can commit the resources and say "yes" to a consumer needing admission control capabilities</t>
		<t>Knowing when to remove admission control state is difficult in the absence of a heavy-weight resource reservation protocol. Soft state timeout may or may not be an adequate answer.</t>
	</list>

	Despite the challenges above, it may be possible to craft an admission control scheme for ICN that achieves the desired QoS goals of applications without the invention and deployment of a complex separate admission control signaling protocol. There have been designs in earlier network architectures that were capable of performing admission control piggybacked on packet transmission.</t>

	<t>(The earliest example the author is aware of is <xref target="Autonet"/>).</t> 

	<t>Such a scheme might have the following general shape <spanx style="strong">(warning: serious hand waving follows!)</spanx>:
	<list style="symbols">
		<t>In addition to a QoS treatment and a traffic specification, an Interest requesting admission for the corresponding equivalence class would so indicate via a new TLV. It would also need to: (a) indicate an expiration time after which any reserved resources can be released, and (b) indicate that caches be bypassed, so that the admission control request arrives at a bone-fide producer (or Repo).</t>
		<t>Each forwarder processing the Interest would check for resource availability and if not available, or the requested service not feasible, reject the Interest with an admission control failure. If resources are available, the forwarder would record the traffic specification as described above and forward the Interest.</t>
		<t>If the Interest successfully arrives at a producer, the producer returns the requested Data.</t>
		<t>Each on-path forwarder, on receiving the matching Data message, if the resources are still available, does the actual allocation, and marks the admission control TLV as "provisionally approved". Conversely, if the resource reservation fails, the admission control is marked "failed", although the Data is still passed downstream.</t>
		<t>Upon the Data message arriving, the consumer knows if admission succeeded or not, and subsequent Interests can rely on the QoS state being in place until either some failure occurs, or a topology or other forwarding change alters the forwarding path. To deal with this, additional machinery is needed to ensure subsequent Interests for an admitted flow either follow that path or an error is reported. One possibility (also useful in many other contexts), is to employ a <spanx>Path Steering</spanx> mechanism, such as the one described in <xref target="Moiseenko2017"/>.</t>
	</list></t>
	</section>
</section>

<!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
<!--<?rfc needLines="8" ?>-->
<!-- Possibly a 'Contributors' section ... -->

<section anchor="IANA" title="IANA Considerations">
<t>This document does not require any IANA actions.</t>
</section>

<section anchor="Security" title="Security Considerations">

<t>There are a few ways in which QoS for ICN interacts with security and privacy issues. Since QoS addresses relationships among traffic rather than the inherent characteristics of traffic, it neither enhances nor degrades the security and privacy properties of the data being carried, as long as the machinery does not alter or otherwise compromise the basic security properties of the associated protocols. The QoS approaches advocated here for ICN can serve to amplify existing threats to network traffic however:
<list style="symbols">	
	<t>An attacker able to manipulate the QoS treatments of traffic can mount a more focused (and potentially more effective) denial of service attack by suppressing performance on traffic the attacker is targeting. Since the architecture here assumes QoS treatments are manipulable hop-by-hop, any on-path adversary can wreak havoc. Note however, that in basic ICN, an on-path attacker can do this and more by dropping, delaying, or mis-routing traffic independent of any particular QoS machinery in use.</t>
	
	<t>By explicitly revealing equivalence classes of traffic via either names or other fields in packets, an attacker has yet one more handle to use to discover linkability of multiple requests.</t>
</list>
</t>
</section>

</middle>

  <!--  *****BACK MATTER ***** -->

<back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
		&RFC2119;
		&RFC8569;
		&RFC8609;
	</references>

	<references title="Informative References">
		&RFC0793;
		&RFC2205;
		&RFC2474;
		&RFC2998;
		&RFC3170;
		&RFC3209;
		&RFC4340;
		&RFC4594;
		&RFC4960;
		&I-D.moiseenko-icnrg-flowclass;
		&I-D.ietf-quic-transport;
		&I-D.muscariello-intarea-hicn;
		&I-D.irtf-icnrg-ccninfo;
		&I-D.mastorakis-icnrg-icntraceroute;
		&I-D.gundogan-icnrg-iotqos;
		&I-D.anilj-icnrg-dnc-qos-icn;
		&I-D.oran-icnrg-flowbalance;
		
		<reference anchor="Mahdian2016" target="http://conferences2.sigcomm.org/acm-icn/2016/proceedings/p1-mahdian.pdf">
			<front>
				<title>MIRCC: Multipath-aware ICN Rate-based Congestion Control, in Proceedings of the 3rd ACM Conference on Information-Centric Networking</title>
				<author surname="Mahdian" initials="M."/>
				<author surname="Arianfar" initials="S."/>
				<author surname="Gibson" initials="J."/>
				<author surname="Oran" initials="D."/>
				<date year="2016"/>
			</front>
			<seriesInfo name="DOI" value="10.1145/2984356.2984365"/>
		</reference>
		
		<reference anchor="Carofiglio2016" target="https://doi.org/10.1016/j.comnet.2016.09.012">
			<front>
				<title>Optimal multipath congestion control and request forwarding in information-centric networks: Protocol design and experimentation in Computer Networks, Vol. 110 No. 9, December 2016</title>
				<author surname="Carofiglio" initials="G."/>
				<author surname="Gallo" initials="M."/>
				<author surname="Muscariello" initials="L."/>
				<date year="2016"/>
			</front>
			<seriesInfo name="DOI" value="10.1145/2377677.2377772"/>
		</reference>
		
		<reference anchor="Carofiglio2012" target="http://conferences.sigcomm.org/sigcomm/2012/paper/icn/p37.pdf">
			<front>
				<title>Joint hop-by-hop and receiver-driven Interest control protocol for content-centric networks, in ICN Workshop at SIGcomm 2012</title>
				<author surname="Carofiglio" initials="G."/>
				<author surname="Gallo" initials="M."/>
				<author surname="Muscariello" initials="L."/>
				<date year="2012"/>
			</front>
			<seriesInfo name="DOI" value="10.1016/j.comnet.2016.09.012"/>
		</reference>
		
		<reference anchor="Wang2013" target="http://conferences.sigcomm.org/sigcomm/2013/papers/icn/p55.pdf">
			<front>
				<title>
				An Improved Hop-by-hop Interest Shaper for Congestion Control in Named Data Networking, in ACM SIGCOMM Workshop on Information-Centric Networking
				</title>
				<author surname="Wang" initials="Y."></author>
				<author surname="Rozhnova" initials="N."></author>
				<author surname="Narayanan" initials="A."></author>
				<author surname="Oran" initials="D."></author>
				<author surname="Rhee" initials="I."></author>
				<date year="2013"></date>
			</front>
			<seriesInfo name="DOI" value="10.1145/2534169.2491233"/>
		</reference>
		
		<reference anchor="Song2018" target="https://conferences.sigcomm.org/acm-icn/2018/proceedings/icn18-final62.pdf">
			<front>
				<title>SMIC: Subflow-level Multi-path Interest Control for Information Centric Networking, in 5th ACM Conference on Information-Centric Networking</title>
				<author surname="Song" initials="J."/>
				<author surname="Lee" initials="M."/>
				<author surname="Kwon" initials="T."/>
				<date year="2018"/>
			</front>
			<seriesInfo name="DOI" value="10.1145/3267955.3267971"/>
		</reference>
		
		<reference anchor="Oran2018QoSslides" target="https://datatracker.ietf.org/meeting/interim-2018-icnrg-03/materials/slides-interim-2018-icnrg-03-sessa-thoughts-on-qos-for-ndnccn-style-icn-protocol-architectures">
			<front>
				<title>Thoughts on Quality of Service for NDN/CCN- style ICN protocol architectures, presented at ICNRG Interim Meeting, Cambridge MA</title>
				<author surname="Oran" initials="D." fullname="Dave Oran"/>
				<date year="2018" month="September" day="24"/>
			</front>
		</reference>
			
		<reference anchor="NDN" target="https://named-data.net/project/execsummary/">
			<front>
				<title>Named Data Networking</title>
				<author surname="NDN team"/>
				<date year="various"/>
			</front>
		</reference>
	
		<reference anchor="minmaxfairness" target="https://en.wikipedia.org/wiki/Max-min_fairness">
			<front>
				<title>Max-min Fairness</title>
				<author surname="Wikipedia"/>
				<date year="no date"/>
			</front>
		</reference>
		
		<reference anchor="proportionalfairness" target="https://en.wikipedia.org/wiki/Proportionally_fair">
			<front>
				<title>Proportionally Fair</title>
				<author surname="Wikipedia"/>
				<date year="no date"/>
			</front>
		</reference>
		
		<reference anchor="AS" target="https://en.wikipedia.org/wiki/Autonomous_system_(Internet)">
			<front>
				<title>Autonomous System (Internet)</title>
				<author surname="Wikipedia"/>
				<date year="no date"/>
			</front>
		</reference>
		
		<reference anchor="Shenker2006" target="https://dl.acm.org/citation.cfm?id=2316898">
			<front>
				<title>Fundamental Design Issues for the Future Internet, in IEEE Journal on Selected Areas in Communications</title>
				<author surname="Shenker" initials="S."/>
				<date year="2006"/>
			</front>
			<seriesInfo name="DOI" value="10.1109/49.414637"/>
		</reference>	
		
		<reference anchor="Wang2000" target="https://ieeexplore.ieee.org/document/819168?arnumber=819168">
			<front>
				<title>Multicast routing and its QoS extension: problems, algorithms, and protocols, in IEEE Network, Vol:14, No:1</title>
				<author surname="Wang" initials="B."/>
				<author surname="Hou" initials="J.C."/>
				<date year="2000" month="Jan/Feb"/>
			</front>
			<seriesInfo name="DOI" value="10.1109/65.819168"/>
		</reference>
		
		<reference anchor="Tseng2003" target="https://onlinelibrary.wiley.com/doi/abs/10.1002/net.10084">
			<front>
				<title>The performance of QoS-aware IP multicast routing protocols, in Networks, Vol:42, No:2</title>
				<author surname="Tseng" initials="CH.J."/>
				<date year="2003" month="September"/>
			</front>
			<seriesInfo name="DOI" value="10.1002/net.10084"/>
		</reference>
		
		<reference anchor="Krol2018" target="https://conferences.sigcomm.org/acm-icn/2018/proceedings/icn18-final9.pdf">
			<front>
				<title>RICE: Remote Method Invocation in ICN, in Proceedings of the 5th ACM Conference on Information-Centric Networking - ICN '18</title>
				<author surname="Krol" initials="M."/>
				<author surname="Habak" initials="K."/>
				<author surname="Oran" initials="D."/>
				<author surname="Kutscher" initials="D."/>
				<author surname="Psaras" initials="I."/>
				<date year="2018" month="September"/>
			</front>
			<seriesInfo name="DOI" value="10.1145/3267955.3267956"/>
		</reference>
		
		<reference anchor="BenAbraham2018" target="https://conferences.sigcomm.org/acm-icn/2018/proceedings/icn18-final31.pdf">
			<front>
				<title>Decoupling Information and Connectivity via Information-Centric Transport, in 5th ACM Conference on Information-Centric Networking (ICN '18), September 21-23, 2018, Boston, MA, USA</title>
				<author surname="Ben Abraham" initials="H."/>
				<author surname="Parwatikar" initials="J."/>
				<author surname="DeHart" initials="J."/>
				<author surname="Dresher" initials="A."/>
				<author surname="Crowley" initials="P."/>
				<date year="2018" month="September"/>
			</front>
			<seriesInfo name="DOI" value="10.1145/3267955.3267963"/>
		</reference>
		
		<reference anchor="Schneider2016" target="http://conferences2.sigcomm.org/acm-icn/2016/proceedings/p21-schneider.pdf">
			<front>
				<title>A Practical Congestion Control Scheme for Named Data Networking, in Proceedings of the 2016 conference on 3rd ACM Conference on Information-Centric Networking - ACM-ICN '16</title>
				<author surname="Schneider" initials="K."/>
				<author surname="Yi" initials="C."/>
				<author surname="Zhang" initials="B."/>
				<author surname="Zhang" initials="L."/>
				<date year="2016"/>
			</front>
			<seriesInfo name="DOI" value="10.1145/2984356.2984369"/>
		</reference>
				
		<reference anchor="Autonet" target="https://www.hpl.hp.com/techreports/Compaq-DEC/SRC-RR-59.pdf">
			<front>
				<title>Autonet: a High-speed, Self-configuring Local Area Network Using Point-to-point Links</title>
				<author surname="Schroeder" initials="M."/>
				<author surname="Birrell" initials="A."/>
				<author surname="Burrows" initials="M."/>
				<author surname="Murray" initials="H."/>
				<author surname="Needham" initials="R."/>
				<author surname="Rodeheffer" initials="T."/>
				<author surname="Satterthwaite" initials="E."/>
				<author surname="Thacker" initials="C."/>
				<date year="1990" month="April"/>
			</front>
			<seriesInfo name="SRC Research Reports" value="59"/>
		</reference>
		
		<reference anchor="Moiseenko2017" target="https://conferences.sigcomm.org/acm-icn/2017/proceedings/icn17-2.pdf">
			<front>
				<title>Path Switching in Content Centric and Named Data Networks, in 4th ACM Conference on Information-Centric Networking (ICN 2017)</title>
				<author surname="Moiseenko" initials="I."/>
				<author surname="Oran" initials="D."/>
				<date year="2017" month="September"/>
			</front>
			<seriesInfo name="DOI" value="10.1145/3125719.3125721"/>
		</reference>

		
    </references>

    <!-- Change Log
v00 2016-07-13  DRO   Initial version-->
  </back>
</rfc>
